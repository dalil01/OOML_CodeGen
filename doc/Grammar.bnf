/*   Rule:
     rule=...

     Non-Terminal:
     "..." or '...'

     Terminal:
     ...

     Concat:
     ... ...

     Choice:
     ...|...

     Optional:
     ...?

     0 or more:
     ...*

     1 or more:
     ...+

     Grouping:
     (...)

     Exclusion:
     ...-...

     Comment:
     //...
     and C style multilines

     Character Set:
     [...] following POSIX extended regular expression rules in the manual grep(1)

     A rule in CAPS is one that will be abstracted by the tokenizer.
     They are mostly here as a referece to make sure we follow the language specifications.
     In particular, PADDING and SEPARATOR will be removed from the token listing
     and only serve to differenciate tokens for the tokenizer.
*/

CLASS_ID    = "class"
INTERFACE_ID= "interface"
PACKAGE_ID  = "package"
INHERITANCE_ID
            = "->"
ENUM_ID     = "enum"

RESERVED    = CLASS_ID
            | INTERFACE_ID
            | PACKAGE_ID
            | INHERITANCE_ID
            | ENUM_ID

// "- reserved" here signifies that a NAME cannot match the 'reserved' rule
NAME        = ([a-zA-Z_][a-zA-Z0-9_.]*) - RESERVED

SPACE       = [ \t]

EOF         = "\0"

// EOL means anything ending a line
EOL         = "\n"
            | "\n\r"

// We do not care if left and right are separated
// PAD is just a shorthand for PADDING
PADDING     = (SPACE | EOL)* comment (SPACE | EOL)*
PAD         = PADDING

// We need left and right to be separated
// SEP is just a shorthand for SEPARATOR
SEPARATOR   = (SPACE | EOL) PADDING
SEP         = SEPARATOR

/* Comments might be removed from the source file before the tokenizer,
   it will depend on the implementation we choose.
   This would allow them to be more flexible compare to the rather limited
   placement we have here.
*/
comment     = "//" [^\n\r\0]*
// Multiline comments
            | "/*" ([^\0] - "*/")*

// Starting rule
Start       = PAD list PAD EOF

list        = entry SEP list
            | entry

entry       = class
            | enum
            | interface
            | package
            | import

// FILE being any valid url
// (couldn't be bothered to do that one, pain in the a to specify properly)
import      = "@" FILE



/* Classes are always public? in java at least, so no access modifiers needed.
   This only holds for toplevel classes, but sub-classes have not been
   implemented yet. This might change anyway when we try to implement more
   languages.
*/
class       = restricted_access_modifier CLASS_ID SEP modifier_list NAME inheritance class_model


class_model = PAD "{" PAD class_prop_list "}"
            | PAD ":" PAD class_prop_list

class_prop_list
            = class_prop SEP class_prop_list
            | class_prop

class_prop  = attribute_with_access
            | method_with_access
            | constructor_with_access
            | access_block

restricted_access_modifier
            = "+"
            | ""

/* + for public
   - for private
   # for protected
*/
access_modifier
            = "+"
            | "-"
            | "#"


class_access_block
            = access_modifier PAD ":" PAD class_prop_block_list

class_prop_block_list
            = class_prop_block SEP class_prop_block_list
            | class_prop_block

class_prop_block
            = attribute
            | method
            | constructor

// The access modifier can be optional if we want to use the 'default'
// behaviour of java.
attribute_with_access
            = access_modifier attribute
            | attribute

attribute   = PAD modifier_list NAME PAD ":" PAD accessors PAD type

modifier_list
            = modifier SEP modifier_list
            | modifier SEP
            | ""

modifier    = NAME

accessors   = getter PAD setter
            | getter
            | setter PAD getter
            | setter
            | ""

getter      = "-"

setter      = "+"

method_with_access
            = access_modifier method
            | method

method      = modifier_list NAME PAD "(" argument_list PAD ")" PAD ":" PAD type

argument_list
            = PAD modifier_list NAME PAD ":" PAD type SEP argument_list
            | PAD modifier_list NAME PAD ":" PAD type

type        = NAME

constructor_with_access
            = access_modifier constructor
            | constructor

constructor = NAME PAD "(" argument_list PAD ")"

interface   = restricted_access_modifier INTERFACE_ID SEP modifier_list NAME inheritance interface_model

interface_model
            = PAD "{" PAD interface_prop_list "}"
            | PAD ":" PAD interface_prop_list

interface_prop_list
            = interface_prop SEP interface_prop_list
            | interface_prop

interface_prop
            = attribute_with_access
            | method_with_access
            | interface_access_block

interface_access_block
            = access_modifier PAD ":" PAD interface_prop_block_list

interface_prop_block_list
            = interface_prop_block SEP interface_prop_block_list
            | interface_prop_block

interface_prop_block
            = attribute
            | method

// This might need some polishing later.
package     = PACKAGE_ID SEP NAME

inheritance = PAD INHERITANCE_ID inheritance_list

inheritance_list
            = PAD NAME
            | PAD NAME PAD ',' inheritance_list

enum        = restricted_access_modifier ENUM_ID SEP NAME PAD enum_model

enum_model  = SEP ":" PAD enum_value_list
            | SEP "{" PAD enum_value_list PAD "}"

enum_value_list
            = PAD enum_key PAD "," enum_value_list
            | PAD enum_key


enum_key    = NAME
            | NAME PAD "=" PAD NAME


// TODO
// reference -> inheritance done, other relationship in later PR
